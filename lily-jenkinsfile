def image_name
def envir
def image_name
def envir
pipeline{
    agent {
        node {label 'nodejs'}
        node {label 'nodejs'}
    }
    environment {
        DOCKER_CREDENTIAL_ID = 'huaweidocker'
        DOCKER_REGISTRY = 'swr.ap-southeast-1.myhuaweicloud.com'
        DOCKER_NAMESPACE = 'gh'
        APP_NAME = 'lily-schedule'
    }
        DOCKER_CREDENTIAL_ID = 'huaweidocker'
        DOCKER_REGISTRY = 'swr.ap-southeast-1.myhuaweicloud.com'
        DOCKER_NAMESPACE = 'gh'
        APP_NAME = 'lily-schedule'
    }
    stages {
        stage('Build') {
            when {
                branch pattern: 'lily-schedule-test|lily-schedule-master', comparator: "REGEXP"
            }
            steps {
                script {
                    container ('nodejs') {
                        def tag_name = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                        sh "echo $tag_name > tag_name.txt"
                        image_name = "$DOCKER_REGISTRY/$DOCKER_NAMESPACE/$APP_NAME-$BRANCH_NAME:$tag_name"
                        sh "docker build -f apps/lily-schedule/DockerFile -t $image_name ."
                        withCredentials([usernamePassword(passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME', credentialsId: "$DOCKER_CREDENTIAL_ID",)]) {
                            sh 'echo "$DOCKER_PASSWORD" | docker login $DOCKER_REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
                            sh "docker push $image_name"
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            when {
                branch pattern: 'lily-schedule-test|lily-schedule-master', comparator: "REGEXP"
            }
            steps {
                script {
                    container ('nodejs') {
                        def kubeconfig
                        def k8s_namespace
                        def k8s_deployment_name
                        def k8s_container_name
                        if(BRANCH_NAME != 'lily-schedule-master') {
                            kubeconfig = 'demo-kubeconfig'
                            envir = BRANCH_NAME.substring(14)
                        } else {
                            input(message: '@admin @harrison', submitter: 'admin, harrison')
                            kubeconfig = 'kubeconfig-cce'
                            envir = 'prod'
                        }
                        k8s_namespace = "dws-$envir"
                        k8s_deployment_name = "$APP_NAME"
                        k8s_container_name = "$APP_NAME"
                        withCredentials([kubeconfigContent(credentialsId: kubeconfig, variable: 'KUBECONFIG_CONTENT')]) {
                            sh """
                                mkdir ~/.kube && echo "$KUBECONFIG_CONTENT" > ~/.kube/config;
                                kubectl -n $k8s_namespace set image deployment/$k8s_deployment_name $k8s_container_name=$image_name
                            """
                        }
                    }
                }
            }
        }
        stage('Lark通知') {
            when {
                branch pattern: 'lily-schedule-test|lily-schedule-master', comparator: "REGEXP"
            }
            steps {
                container ('nodejs') {
                    git(url: 'https://gitlab.diancun.net/cryptomint.space/code-depoly.git', credentialsId: 'gitlab-ce', branch: 'master', changelog: true, poll: false)
                    sh 'sed -i "s/cryptomint_HHJKKK/$APP_NAME/g" lark.sh'
                    sh 'bash lark.sh $envir'
                }
            }
        }
        stage('Sonar-scanner') {
            when {
                branch 'lily-schedule-master'
            }
            steps {
                container ('nodejs') {
                    sh 'sonar-scanner \
                      -Dsonar.projectKey=$APP_NAME \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=http://172.29.64.2:4095 \
                      -Dsonar.login=c636aa552888af8abe7678782359b5383a6feacc'
                }
            }
        }
    }
}